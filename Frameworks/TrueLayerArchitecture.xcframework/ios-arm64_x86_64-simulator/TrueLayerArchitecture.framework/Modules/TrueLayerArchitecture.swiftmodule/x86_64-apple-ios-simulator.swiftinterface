// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerArchitecture
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
import TrueLayerLogger
import TrueLayerUtils
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol Action {
}
public protocol Routable : AnyObject {
  var routeIdentifier: TrueLayerArchitecture.RouteIdentifier { get }
  var navigationConfiguration: [TrueLayerArchitecture.RoutingRequest : any TrueLayerArchitecture.RoutingInstruction] { get }
}
@_Concurrency.MainActor public class Router {
  @_Concurrency.MainActor final public let merchantRootViewController: UIKit.UIViewController
  @_Concurrency.MainActor public var _topViewController: UIKit.UIViewController {
    get
  }
  nonisolated public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor public func start(on viewController: UIKit.UIViewController, animated: Swift.Bool = false, onRestart: @escaping @_Concurrency.MainActor (UIKit.UIViewController) -> Swift.Void = { _ in })
  @_Concurrency.MainActor public func show<Route>(routeIdentifier: Route, context: Any? = nil, animated: Swift.Bool = true, completion: TrueLayerArchitecture.RoutingCompletion? = nil) where Route : Swift.RawRepresentable, Route.RawValue == Swift.String
  @_Concurrency.MainActor public func hide<Route>(routeIdentifier: Route, animated: Swift.Bool = true, completion: TrueLayerArchitecture.RoutingCompletion? = nil) where Route : Swift.RawRepresentable, Route.RawValue == Swift.String
  @_Concurrency.MainActor public func popTo(viewController: UIKit.UIViewController, animated: Swift.Bool = true)
  @_Concurrency.MainActor public func popTopViewController(animated: Swift.Bool = true)
  @objc deinit
}
public typealias RoutingCompletion = () -> Swift.Void
public typealias ViewControllerProvider = (_ context: Any?) -> UIKit.UIViewController
public typealias RouteIdentifier = Swift.String
public typealias RoutableViewController = UIKit.UIViewController & TrueLayerArchitecture.Routable
public protocol RoutingInstruction {
}
public enum ForwardRoutingInstruction : TrueLayerArchitecture.RoutingInstruction {
  case push(TrueLayerArchitecture.ViewControllerProvider)
  case present(TrueLayerArchitecture.ViewControllerProvider)
}
public enum BackwardRoutingInstruction : TrueLayerArchitecture.RoutingInstruction {
  case pop
  case dismiss
  public static func == (a: TrueLayerArchitecture.BackwardRoutingInstruction, b: TrueLayerArchitecture.BackwardRoutingInstruction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoutingRequest : Swift.Hashable {
  public static func show<Route>(_ route: Route) -> TrueLayerArchitecture.RoutingRequest where Route : Swift.RawRepresentable, Route.RawValue == Swift.String
  public static func hide<Route>(_ route: Route) -> TrueLayerArchitecture.RoutingRequest where Route : Swift.RawRepresentable, Route.RawValue == Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TrueLayerArchitecture.RoutingRequest, b: TrueLayerArchitecture.RoutingRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TLLocalState {
}
public protocol TLModelledView : TrueLayerArchitecture.TLSimpleView {
  associatedtype VM : TrueLayerArchitecture.TLViewModel
  var viewModel: Self.VM? { get set }
  func update(oldViewModel: Self.VM?)
}
extension TrueLayerArchitecture.TLModelledView {
  public var viewModelKey: Swift.UnsafeRawPointer {
    get
  }
  public var viewModel: Self.VM? {
    get
    set
  }
  public func update()
}
public protocol TLSimpleView : AnyObject {
  func setup()
  func style()
  func update()
  func layout()
}
public protocol TLViewModel {
}
extension TrueLayerArchitecture.Router : Swift.Sendable {}
extension TrueLayerArchitecture.BackwardRoutingInstruction : Swift.Equatable {}
extension TrueLayerArchitecture.BackwardRoutingInstruction : Swift.Hashable {}
