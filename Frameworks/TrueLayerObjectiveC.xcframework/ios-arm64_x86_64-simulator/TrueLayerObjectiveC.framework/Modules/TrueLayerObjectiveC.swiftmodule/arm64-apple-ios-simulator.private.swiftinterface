// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerObjectiveC
import Foundation
import Swift
import TrueLayerSDK
@_spi(TrueLayer) import TrueLayerUI
@_spi(TrueLayer) import TrueLayerUtils
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum TrueLayerMandateError : Swift.Int, Swift.Error {
  case authorizationFailed
  case connectionIssues
  case generic
  case invalidToken
  case invalidRedirectURI
  case mandateExpired
  case mandateNotFound
  case mandateRejected
  case providerOffline
  case revoked
  case sdkNotConfigured
  case serverError
  case unexpectedBehavior
  case userCanceled
  case providerError
  case providerRejected
  case invalidRequest
  case invalidSortCode
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerMandateResultShown : Swift.Int {
  case noneShown
  case noneInvalidState
  case success
  case initiated
  case authorizationFailed
  case expired
  case genericFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerMandateState : Swift.Int {
  case authorized
  case redirect
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class TrueLayerProcessMandateFailure : ObjectiveC.NSObject {
  @objc final public let error: TrueLayerObjectiveC.TrueLayerMandateError
  @objc final public let resultShown: TrueLayerObjectiveC.TrueLayerMandateResultShown
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class TrueLayerProcessMandateSuccess : ObjectiveC.NSObject {
  @objc final public let state: TrueLayerObjectiveC.TrueLayerMandateState
  @objc final public let resultShown: TrueLayerObjectiveC.TrueLayerMandateResultShown
  @objc deinit
}
@objc public enum TrueLayerMandateStatus : Swift.Int {
  case authorizationRequired
  case authorizing
  case authorized
  case revoked
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerSinglePaymentError : Swift.Int, Swift.Error {
  case authorizationFailed
  case connectionIssues
  case generic
  case blocked
  case invalidAccountDetails
  case invalidAccountHolderName
  case invalidToken
  case invalidCredentials
  case invalidRemitterAccount
  case invalidRequest
  case invalidSortCode
  case insufficientFunds
  case notAuthorized
  case paymentLimitExceeded
  case providerError
  case providerExpired
  case providerRejected
  case unknownError
  case userCanceledAtProvider
  case invalidRedirectURI
  case paymentExpired
  case paymentNotFound
  case paymentRejected
  case providerOffline
  case sdkNotConfigured
  case serverError
  case unexpectedBehavior
  case userCanceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class TrueLayerProcessSinglePaymentFailure : ObjectiveC.NSObject {
  @objc final public let error: TrueLayerObjectiveC.TrueLayerSinglePaymentError
  @objc final public let resultShown: TrueLayerObjectiveC.TrueLayerSinglePaymentResultShown
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class TrueLayerProcessSinglePaymentSuccess : ObjectiveC.NSObject {
  @objc final public let state: TrueLayerObjectiveC.TrueLayerSinglePaymentState
  @objc final public let resultShown: TrueLayerObjectiveC.TrueLayerSinglePaymentResultShown
  @objc deinit
}
@objc public enum TrueLayerSinglePaymentResultShown : Swift.Int {
  case noneShown
  case noneInvalidState
  case success
  case initiated
  case insufficientFunds
  case paymentLimitExceeded
  case userCanceledAtProvider
  case authorizationFailed
  case expired
  case invalidAccountDetails
  case genericFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerSinglePaymentState : Swift.Int {
  case authorized
  case executed
  case redirect
  case settled
  case wait
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerSinglePaymentStatus : Swift.Int {
  case authorizationRequired
  case authorizing
  case authorized
  case executed
  case settled
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TrueLayerEnvironment : Swift.Int {
  case sandbox
  case production
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class TrueLayerColors : ObjectiveC.NSObject {
  @objc public var backgroundColors: TrueLayerObjectiveC.TrueLayerBackgroundColors
  @objc public var contentColors: TrueLayerObjectiveC.TrueLayerContentColors
  @objc public var accessoryColors: TrueLayerObjectiveC.TrueLayerAccessoryColors
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TrueLayerBackgroundColors : ObjectiveC.NSObject {
  @objc public var backgroundPrimary: UIKit.UIColor
  @objc public var backgroundSecondary: UIKit.UIColor
  @objc public var backgroundActionPrimary: UIKit.UIColor
  @objc public var backgroundCell: UIKit.UIColor
  @objc public init(backgroundPrimaryLight: UIKit.UIColor? = nil, backgroundSecondaryLight: UIKit.UIColor? = nil, backgroundActionPrimaryLight: UIKit.UIColor? = nil, backgroundCellLight: UIKit.UIColor? = nil, backgroundPrimaryDark: UIKit.UIColor? = nil, backgroundSecondaryDark: UIKit.UIColor? = nil, backgroundActionPrimaryDark: UIKit.UIColor? = nil, backgroundCellDark: UIKit.UIColor? = nil)
  @objc convenience public init(backgroundPrimaryLightHex: Swift.String?, backgroundSecondaryLightHex: Swift.String?, backgroundActionPrimaryLightHex: Swift.String?, backgroundCellLightHex: Swift.String?, backgroundPrimaryDarkHex: Swift.String?, backgroundSecondaryDarkHex: Swift.String?, backgroundActionPrimaryDarkHex: Swift.String?, backgroundCellDarkHex: Swift.String?) throws
  @objc deinit
}
@objc public class TrueLayerContentColors : ObjectiveC.NSObject {
  @objc public var contentPrimary: UIKit.UIColor
  @objc public var contentSecondary: UIKit.UIColor
  @objc public var contentPrimaryInverted: UIKit.UIColor
  @objc public var contentAction: UIKit.UIColor
  @objc public var contentError: UIKit.UIColor
  @objc public init(contentPrimaryLight: UIKit.UIColor? = nil, contentSecondaryLight: UIKit.UIColor? = nil, contentPrimaryInvertedLight: UIKit.UIColor? = nil, contentActionLight: UIKit.UIColor? = nil, contentErrorLight: UIKit.UIColor? = nil, contentPrimaryDark: UIKit.UIColor? = nil, contentSecondaryDark: UIKit.UIColor? = nil, contentPrimaryInvertedDark: UIKit.UIColor? = nil, contentActionDark: UIKit.UIColor? = nil, contentErrorDark: UIKit.UIColor? = nil)
  @objc convenience public init(contentPrimaryLightHex: Swift.String?, contentSecondaryLightHex: Swift.String?, contentPrimaryInvertedLightHex: Swift.String?, contentActionLightHex: Swift.String?, contentErrorLightHex: Swift.String?, contentPrimaryDarkHex: Swift.String?, contentSecondaryDarkHex: Swift.String?, contentPrimaryInvertedDarkHex: Swift.String?, contentActionDarkHex: Swift.String?, contentErrorDarkHex: Swift.String?) throws
  @objc deinit
}
@objc public class TrueLayerAccessoryColors : ObjectiveC.NSObject {
  @objc public var separator: UIKit.UIColor
  @objc public var uiElementBorder: UIKit.UIColor
  @objc public init(separatorLight: UIKit.UIColor? = nil, uiElementBorderLight: UIKit.UIColor? = nil, separatorDark: UIKit.UIColor? = nil, uiElementBorderDark: UIKit.UIColor? = nil)
  @objc convenience public init(separatorLightHex: Swift.String?, uiElementBorderLightHex: Swift.String?, separatorDarkHex: Swift.String?, uiElementBorderDarkHex: Swift.String?) throws
  @objc deinit
}
@objc final public class TrueLayerMandateContext : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let token: Swift.String
  @objc final public let redirectURL: Foundation.URL
  @objc final public let preferences: TrueLayerObjectiveC.TrueLayerMandatePreferences
  @objc public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerObjectiveC.TrueLayerMandatePreferences)
  @objc deinit
}
@objc final public class TrueLayerMandatePreferences : ObjectiveC.NSObject {
  @objc public init(presentationStyle: TrueLayerObjectiveC.TrueLayerPresentationStyle, shouldShowResultScreen: Swift.Bool = true, maximumResultScreenTimeout: Foundation.NSNumber?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class TrueLayerPaymentsManager : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $AsyncAwait
  @objc public static func configure(environment: TrueLayerObjectiveC.TrueLayerEnvironment, visualSettings: TrueLayerObjectiveC.TrueLayerVisualSettings?, additionalConfiguration: [Swift.String : Swift.String]) async
  #endif
  @objc public static func processSinglePayment(context: TrueLayerObjectiveC.TrueLayerSinglePaymentContext, onSuccess: @escaping (TrueLayerObjectiveC.TrueLayerProcessSinglePaymentSuccess) -> Swift.Void, onFailure: @escaping (TrueLayerObjectiveC.TrueLayerProcessSinglePaymentFailure) -> Swift.Void)
  @objc public static func processSinglePayment(context: TrueLayerObjectiveC.TrueLayerSinglePaymentContext, success: @escaping (TrueLayerObjectiveC.TrueLayerSinglePaymentState) -> Swift.Void, failure: @escaping (TrueLayerObjectiveC.TrueLayerSinglePaymentError) -> Swift.Void)
  @objc public static func singlePaymentStatus(paymentIdentifier: Swift.String, resourceToken: Swift.String, success: @escaping (TrueLayerObjectiveC.TrueLayerSinglePaymentStatus) -> Swift.Void, failure: @escaping (TrueLayerObjectiveC.TrueLayerSinglePaymentError) -> Swift.Void)
  @objc public static func processMandate(context: TrueLayerObjectiveC.TrueLayerMandateContext, onSuccess: @escaping (TrueLayerObjectiveC.TrueLayerProcessMandateSuccess) -> Swift.Void, onFailure: @escaping (TrueLayerObjectiveC.TrueLayerProcessMandateFailure) -> Swift.Void)
  @objc public static func processMandate(context: TrueLayerObjectiveC.TrueLayerMandateContext, success: @escaping (TrueLayerObjectiveC.TrueLayerMandateState) -> Swift.Void, failure: @escaping (TrueLayerObjectiveC.TrueLayerMandateError) -> Swift.Void)
  @objc public static func mandateStatus(mandateIdentifier: Swift.String, resourceToken: Swift.String, success: @escaping (TrueLayerObjectiveC.TrueLayerMandateStatus) -> Swift.Void, failure: @escaping (TrueLayerObjectiveC.TrueLayerMandateError) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TrueLayerPresentationStyle : ObjectiveC.NSObject {
  @objc public init(presentOn viewController: UIKit.UIViewController, style: UIKit.UIModalPresentationStyle = .automatic)
  @objc deinit
}
@objc final public class TrueLayerSinglePaymentContext : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let token: Swift.String
  @objc final public let redirectURL: Foundation.URL
  @objc final public let preferences: TrueLayerObjectiveC.TrueLayerSinglePaymentPreferences
  @objc public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerObjectiveC.TrueLayerSinglePaymentPreferences)
  @objc deinit
}
@objc final public class TrueLayerSinglePaymentPreferences : ObjectiveC.NSObject {
  @objc public init(presentationStyle: TrueLayerObjectiveC.TrueLayerPresentationStyle, preferredCountryCode: Swift.String? = nil, shouldShowResultScreen: Swift.Bool = true, maximumResultScreenTimeout: Foundation.NSNumber?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TrueLayerVisualSettings : ObjectiveC.NSObject {
  @objc public var colors: TrueLayerObjectiveC.TrueLayerColors
  @available(*, deprecated, renamed: "customFontFamilyName", message: "Use customFontFamilyName instead.")
  @objc public var fontFamilyName: Swift.String
  @objc public var customFontFamilyName: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension TrueLayerObjectiveC.TrueLayerMandateError : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerMandateError : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerMandateError : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerMandateResultShown : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerMandateResultShown : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerMandateResultShown : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerMandateState : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerMandateState : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerMandateState : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerMandateStatus : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerMandateStatus : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerMandateStatus : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentError : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentError : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentError : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentResultShown : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentResultShown : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentResultShown : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentState : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentState : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentState : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentStatus : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentStatus : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerSinglePaymentStatus : Swift.RawRepresentable {}
extension TrueLayerObjectiveC.TrueLayerEnvironment : Swift.Equatable {}
extension TrueLayerObjectiveC.TrueLayerEnvironment : Swift.Hashable {}
extension TrueLayerObjectiveC.TrueLayerEnvironment : Swift.RawRepresentable {}
