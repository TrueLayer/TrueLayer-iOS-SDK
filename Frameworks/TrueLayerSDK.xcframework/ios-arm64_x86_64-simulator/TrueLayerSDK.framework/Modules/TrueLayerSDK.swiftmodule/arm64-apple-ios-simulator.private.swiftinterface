// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
@_spi(TrueLayer) import TrueLayerAPI
@_spi(TrueLayer) import TrueLayerArchitecture
@_spi(TrueLayer) import TrueLayerCore
@_spi(TrueLayer) import TrueLayerLogger
@_spi(TrueLayer) import TrueLayerNetwork
@_spi(TrueLayer) import TrueLayerUI
@_spi(TrueLayer) import TrueLayerUtils
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class TrueLayerSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension TrueLayerSDK.TrueLayer {
  public enum Environment {
    case production
    case sandbox
    public static func == (a: TrueLayerSDK.TrueLayer.Environment, b: TrueLayerSDK.TrueLayer.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration {
  public enum Key : Swift.String {
    case customIntegrationType
    case customIntegrationVersion
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public struct Context {
    public let identifier: Swift.String
    public let token: Swift.String
    public let redirectURL: Foundation.URL
    public let preferences: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Preferences
    public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Preferences)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum Error : Swift.Error, Swift.Equatable {
    case authorizationFailed
    case connectionIssues
    case generic(reason: Swift.String)
    case invalidToken
    case invalidRedirectURI(_: [Swift.String])
    case mandateExpired
    case mandateNotFound
    case mandateRejected
    case providerOffline
    case revoked
    case sdkNotConfigured
    case serverError
    case providerError
    case providerRejected
    case invalidRequest
    case invalidSortCode
    case unknownError
    case unexpectedBehavior
    case userCanceled
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error) -> Swift.Bool
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public struct Preferences {
    public init(presentationStyle: TrueLayerSDK.TrueLayer.PresentationStyle, shouldShowResultScreen: Swift.Bool = true, maximumResultScreenTimeout: Foundation.TimeInterval? = nil)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public struct ProcessResult {
    public struct Success {
      public let state: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State
    }
    public struct Failure : Swift.Error {
      public let error: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error
    }
    public let result: Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ProcessResult.Success, TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ProcessResult.Failure>
    public let resultShown: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ResultShown
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum ResultShown {
    case noneShown
    case noneInvalidState
    case success
    case initiated
    case authorizationFailed
    case expired
    case genericFailed
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ResultShown, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ResultShown) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum State {
    case authorized
    @available(*, deprecated, message: ".redirect is no longer a valid case sent by the SDK. This case will be removed in the future.")
    case redirect
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum Status : Swift.Equatable {
    case authorizationRequired
    case authorizing
    case authorized
    case revoked
    case failed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public struct Context {
    public let identifier: Swift.String
    public let token: Swift.String
    public let redirectURL: Foundation.URL
    public let preferences: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Preferences
    public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Preferences)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum Error : Swift.Error, Swift.Equatable {
    case authorizationFailed
    case connectionIssues
    case generic(reason: Swift.String)
    case invalidToken
    case invalidRedirectURI(_: [Swift.String])
    case paymentExpired
    case paymentNotFound
    case paymentRejected
    case providerOffline
    case sdkNotConfigured
    case serverError
    case blocked
    case invalidAccountDetails
    case invalidAccountHolderName
    case invalidCredentials
    case invalidRemitterAccount
    case invalidRequest
    case invalidSortCode
    case insufficientFunds
    case notAuthorized
    case paymentLimitExceeded
    case providerError
    case providerExpired
    case providerRejected
    case unknownError
    case userCanceledAtProvider
    case unexpectedBehavior
    case userCanceled
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error) -> Swift.Bool
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public struct Preferences {
    public init(presentationStyle: TrueLayerSDK.TrueLayer.PresentationStyle, preferredCountryCode: Swift.String? = nil, shouldShowResultScreen: Swift.Bool = true, maximumResultScreenTimeout: Foundation.TimeInterval? = nil)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public struct ProcessResult {
    public struct Success {
      public let state: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State
    }
    public struct Failure : Swift.Error {
      public let error: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error
    }
    public let result: Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ProcessResult.Success, TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ProcessResult.Failure>
    public let resultShown: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ResultShown
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum ResultShown {
    case noneShown
    case noneInvalidState
    case success
    case initiated
    case insufficientFunds
    case paymentLimitExceeded
    case userCanceledAtProvider
    case authorizationFailed
    case expired
    case invalidAccountDetails
    case genericFailed
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ResultShown, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ResultShown) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum State {
    case authorized
    case executed
    @available(*, deprecated, message: ".redirect is no longer a valid case sent by the SDK. This case will be removed in the future.")
    case redirect
    case settled
    case wait
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum Status : Swift.Equatable {
    case authorizationRequired
    case authorizing
    case authorized
    case executed
    case settled
    case failed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum TrueLayer {
}
extension TrueLayerSDK.TrueLayer {
  public enum Payments {
    public static let manager: TrueLayerSDK.TrueLayer.Payments.Manager
  }
}
extension TrueLayerSDK.TrueLayer.Payments {
  public enum Models {
  }
  public enum AdditionalConfiguration {
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models {
  public enum SinglePayment {
  }
  public enum Mandate {
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models {
  @available(*, unavailable, renamed: "SinglePayment")
  public typealias Payment = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment
}
extension TrueLayerSDK.TrueLayer.Payments {
  @available(*, unavailable, renamed: "Models.SinglePayment.State")
  public typealias PaymentState = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State
  @available(*, unavailable, renamed: "Models.SinglePayment.Error")
  public typealias Error = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error
}
extension TrueLayerSDK.TrueLayer.Payments {
  @_hasMissingDesignatedInitializers public class Manager {
    @objc deinit
    public func configure(environment: TrueLayerSDK.TrueLayer.Environment, visualSettings: any TrueLayerSDK.VisualSettingsProvider = DefaultVisualSettings(), additionalConfiguration: [TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.String] = [:]) async
    public func processSinglePayment(context: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Context, then completion: ((TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ProcessResult) -> Swift.Void)?)
    @available(*, deprecated, message: "Use `processSinglePayment` with `TrueLayer.Payments.Models.SinglePayment.ProcessResult` in the completion handler.")
    public func processSinglePayment(context: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Context, then completion: ((Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State, TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error>) -> Swift.Void)?)
    public func singlePaymentStatus(paymentIdentifier: Swift.String, resourceToken: Swift.String) async throws -> TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status
    public func processMandate(context: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Context, then completion: ((TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ProcessResult) -> Swift.Void)?)
    @available(*, deprecated, message: "Use `processMandate` with `TrueLayer.Payments.Models.Mandate.ProcessResult` in the completion handler.")
    public func processMandate(context: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Context, then completion: ((Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State, TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error>) -> Swift.Void)?)
    public func mandateStatus(mandateIdentifier: Swift.String, resourceToken: Swift.String) async throws -> TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status
  }
}
extension TrueLayerSDK.TrueLayer {
  public enum PresentationStyle : Swift.Equatable {
    case present(on: UIKit.UIViewController, style: UIKit.UIModalPresentationStyle = .automatic)
    public static func == (lhs: TrueLayerSDK.TrueLayer.PresentationStyle, rhs: TrueLayerSDK.TrueLayer.PresentationStyle) -> Swift.Bool
  }
}
extension UIKit.UIColor {
  convenience public init(lightAppearance: UIKit.UIColor, darkAppearance: UIKit.UIColor)
}
public protocol VisualSettingsProvider {
  var colors: any TrueLayerSDK.ColorProvider { get }
  @available(*, deprecated, renamed: "customFontFamilyName", message: "Use customFontFamilyName instead.")
  var fontFamilyName: Swift.String { get }
  var customFontFamilyName: Swift.String? { get }
}
extension TrueLayerSDK.VisualSettingsProvider {
  public var fontFamilyName: Swift.String {
    get
  }
  public var customFontFamilyName: Swift.String? {
    get
  }
}
public protocol ColorProvider : TrueLayerSDK.AccessoryColor, TrueLayerSDK.BackgroundColor, TrueLayerSDK.ContentColor {
}
public struct DefaultVisualSettings : TrueLayerSDK.VisualSettingsProvider {
  public let colors: any TrueLayerSDK.ColorProvider
  public let customFontFamilyName: Swift.String?
  public init()
}
public protocol BackgroundColor {
  var backgroundPrimary: UIKit.UIColor { get }
  var backgroundSecondary: UIKit.UIColor { get }
  var backgroundActionPrimary: UIKit.UIColor { get }
  var backgroundCell: UIKit.UIColor { get }
}
extension TrueLayerSDK.BackgroundColor {
  public var backgroundPrimary: UIKit.UIColor {
    get
  }
  public var backgroundSecondary: UIKit.UIColor {
    get
  }
  public var backgroundActionPrimary: UIKit.UIColor {
    get
  }
  public var backgroundCell: UIKit.UIColor {
    get
  }
}
public protocol ContentColor {
  var contentPrimary: UIKit.UIColor { get }
  var contentSecondary: UIKit.UIColor { get }
  var contentPrimaryInverted: UIKit.UIColor { get }
  var contentAction: UIKit.UIColor { get }
  var contentError: UIKit.UIColor { get }
}
extension TrueLayerSDK.ContentColor {
  public var contentPrimary: UIKit.UIColor {
    get
  }
  public var contentSecondary: UIKit.UIColor {
    get
  }
  public var contentPrimaryInverted: UIKit.UIColor {
    get
  }
  public var contentAction: UIKit.UIColor {
    get
  }
  public var contentError: UIKit.UIColor {
    get
  }
}
public protocol AccessoryColor {
  var separator: UIKit.UIColor { get }
  var uiElementBorder: UIKit.UIColor { get }
}
extension TrueLayerSDK.AccessoryColor {
  public var separator: UIKit.UIColor {
    get
  }
  public var uiElementBorder: UIKit.UIColor {
    get
  }
}
extension TrueLayerSDK.TrueLayer.Environment : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Environment : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.RawRepresentable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ResultShown : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.ResultShown : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ResultShown : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.ResultShown : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status : Swift.Hashable {}
