// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrueLayerSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
@_spi(TrueLayer) import TrueLayerAPI
@_spi(TrueLayer) import TrueLayerCore
@_spi(TrueLayer) import TrueLayerNetwork
@_spi(TrueLayer) import TrueLayerUI
@_spi(TrueLayer) import TrueLayerUtils
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class TrueLayerSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension TrueLayerSDK.TrueLayer {
  public enum Environment {
    case production
    case sandbox
    public static func == (a: TrueLayerSDK.TrueLayer.Environment, b: TrueLayerSDK.TrueLayer.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration {
  public enum Key : Swift.String {
    case customIntegrationType
    case customIntegrationVersion
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public struct Context {
    public let identifier: Swift.String
    public let token: Swift.String
    public let redirectURL: Foundation.URL
    public let preferences: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Preferences
    public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Preferences)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum Error : Swift.Error, Swift.Equatable {
    case authorizationFailed
    case connectionIssues
    case generic(reason: Swift.String)
    case invalidToken
    case invalidRedirectURI(_: [Swift.String])
    case mandateExpired
    case mandateNotFound
    case mandateRejected
    case providerOffline
    case revoked
    case sdkNotConfigured
    case serverError
    case unexpectedBehavior
    case userCanceled
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error) -> Swift.Bool
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public struct Preferences {
    public init(presentationStyle: TrueLayerSDK.TrueLayer.PresentationStyle)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum State {
    case authorized
    case redirect
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum Status : Swift.Equatable {
    case authorizationRequired
    case authorizing
    case authorized
    case revoked
    case failed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate {
  public enum UseCase {
    case send
    case signupPlus
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.UseCase, b: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.UseCase) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public struct Context {
    public let identifier: Swift.String
    public let token: Swift.String
    public let redirectURL: Foundation.URL
    public let preferences: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Preferences
    public init(identifier: Swift.String, token: Swift.String, redirectURL: Foundation.URL, preferences: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Preferences)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum Error : Swift.Error, Swift.Equatable {
    case authorizationFailed
    case connectionIssues
    case generic(reason: Swift.String)
    case invalidToken
    case invalidRedirectURI(_: [Swift.String])
    case paymentExpired
    case paymentNotFound
    case paymentRejected
    case providerOffline
    case sdkNotConfigured
    case serverError
    case unexpectedBehavior
    case userCanceled
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error) -> Swift.Bool
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public struct Preferences {
    public init(presentationStyle: TrueLayerSDK.TrueLayer.PresentationStyle, preferredCountryCode: Swift.String? = nil, useCase: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.UseCase = .send)
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum State {
    case authorized
    case executed
    case redirect
    case settled
    case wait
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum Status : Swift.Equatable {
    case authorizationRequired
    case authorizing
    case authorized
    case executed
    case settled
    case failed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment {
  public enum UseCase {
    case send
    case signupPlus
    public static func == (a: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.UseCase, b: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.UseCase) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum TrueLayer {
}
extension TrueLayerSDK.TrueLayer {
  public enum Payments {
    public static let manager: TrueLayerSDK.TrueLayer.Payments.Manager
  }
}
extension TrueLayerSDK.TrueLayer.Payments {
  public enum Models {
  }
  public enum AdditionalConfiguration {
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models {
  public enum SinglePayment {
  }
  public enum Mandate {
  }
}
extension TrueLayerSDK.TrueLayer.Payments.Models {
  @available(*, unavailable, renamed: "SinglePayment")
  public typealias Payment = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment
}
extension TrueLayerSDK.TrueLayer.Payments {
  @available(*, unavailable, renamed: "Models.SinglePayment.State")
  public typealias PaymentState = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State
  @available(*, unavailable, renamed: "Models.SinglePayment.Error")
  public typealias Error = TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error
}
extension TrueLayerSDK.TrueLayer.Payments {
  @_hasMissingDesignatedInitializers final public class Manager {
    final public func configure(environment: TrueLayerSDK.TrueLayer.Environment, visualSettings: TrueLayerSDK.VisualSettingsProvider = DefaultVisualSettings(), additionalConfiguration: [TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.String] = [:])
    final public func processSinglePayment(context: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Context, then completion: ((Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State, TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error>) -> Swift.Void)?)
    #if compiler(>=5.3) && $AsyncAwait
    final public func singlePaymentStatus(paymentIdentifier: Swift.String, resourceToken: Swift.String) async throws -> TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status
    #endif
    final public func processMandate(context: TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Context, then completion: ((Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State, TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Error>) -> Swift.Void)?)
    #if compiler(>=5.3) && $AsyncAwait
    final public func mandateStatus(mandateIdentifier: Swift.String, resourceToken: Swift.String) async throws -> TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status
    #endif
    @available(*, unavailable, renamed: "processSinglePayment(context:completion:)")
    final public func processPayment(context: TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Context, then completion: ((Swift.Result<TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State, TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Error>) -> Swift.Void)?)
    #if compiler(>=5.3) && $AsyncAwait
    @available(*, unavailable, renamed: "singlePaymentStatus(paymentIdentifier:resourceToken:)")
    final public func paymentStatus(paymentIdentifier: Swift.String, resourceToken: Swift.String) async throws -> TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status
    #endif
    @objc deinit
  }
}
extension TrueLayerSDK.TrueLayer {
  public enum PresentationStyle : Swift.Equatable {
    case present(on: UIKit.UIViewController, style: UIKit.UIModalPresentationStyle = .automatic)
    public static func == (lhs: TrueLayerSDK.TrueLayer.PresentationStyle, rhs: TrueLayerSDK.TrueLayer.PresentationStyle) -> Swift.Bool
  }
}
extension UIKit.UIColor {
  convenience public init(lightAppearance: UIKit.UIColor, darkAppearance: UIKit.UIColor)
}
public protocol VisualSettingsProvider {
  var colors: TrueLayerSDK.ColorProvider { get }
  @available(*, deprecated, renamed: "customFontFamilyName", message: "Use customFontFamilyName instead.")
  var fontFamilyName: Swift.String { get }
  var customFontFamilyName: Swift.String? { get }
}
extension TrueLayerSDK.VisualSettingsProvider {
  public var fontFamilyName: Swift.String {
    get
  }
  public var customFontFamilyName: Swift.String? {
    get
  }
}
public protocol ColorProvider : TrueLayerSDK.AccessoryColor, TrueLayerSDK.BackgroundColor, TrueLayerSDK.ContentColor {
}
public struct DefaultVisualSettings : TrueLayerSDK.VisualSettingsProvider {
  public let colors: TrueLayerSDK.ColorProvider
  public let customFontFamilyName: Swift.String?
  public init()
}
public protocol BackgroundColor {
  var backgroundPrimary: UIKit.UIColor { get }
  var backgroundSecondary: UIKit.UIColor { get }
  var backgroundActionPrimary: UIKit.UIColor { get }
  var backgroundCell: UIKit.UIColor { get }
}
extension TrueLayerSDK.BackgroundColor {
  public var backgroundPrimary: UIKit.UIColor {
    get
  }
  public var backgroundSecondary: UIKit.UIColor {
    get
  }
  public var backgroundActionPrimary: UIKit.UIColor {
    get
  }
  public var backgroundCell: UIKit.UIColor {
    get
  }
}
public protocol ContentColor {
  var contentPrimary: UIKit.UIColor { get }
  var contentSecondary: UIKit.UIColor { get }
  var contentPrimaryInverted: UIKit.UIColor { get }
  var contentAction: UIKit.UIColor { get }
  var contentError: UIKit.UIColor { get }
}
extension TrueLayerSDK.ContentColor {
  public var contentPrimary: UIKit.UIColor {
    get
  }
  public var contentSecondary: UIKit.UIColor {
    get
  }
  public var contentPrimaryInverted: UIKit.UIColor {
    get
  }
  public var contentAction: UIKit.UIColor {
    get
  }
  public var contentError: UIKit.UIColor {
    get
  }
}
public protocol AccessoryColor {
  var separator: UIKit.UIColor { get }
  var uiElementBorder: UIKit.UIColor { get }
}
extension TrueLayerSDK.AccessoryColor {
  public var separator: UIKit.UIColor {
    get
  }
  public var uiElementBorder: UIKit.UIColor {
    get
  }
}
extension TrueLayerSDK.TrueLayer.Environment : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Environment : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.AdditionalConfiguration.Key : Swift.RawRepresentable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.State : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.Status : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.UseCase : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.Mandate.UseCase : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.State : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.Status : Swift.Hashable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.UseCase : Swift.Equatable {}
extension TrueLayerSDK.TrueLayer.Payments.Models.SinglePayment.UseCase : Swift.Hashable {}
