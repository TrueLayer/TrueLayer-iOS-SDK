// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
@_spi(TrueLayer) import TrueLayerAPI
@_spi(TrueLayer) import TrueLayerArchitecture
@_spi(TrueLayer) import TrueLayerCore
@_spi(TrueLayer) import TrueLayerLogger
@_spi(TrueLayer) import TrueLayerNetwork
@_spi(TrueLayer) import TrueLayerUtils
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class TrueLayerUIResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_spi(TrueLayer) public typealias RouteIdentifier = Swift.String
extension TrueLayerUI.Analytics {
  public enum Environment {
    case development
    case sandbox
    case production
    public static func == (a: TrueLayerUI.Analytics.Environment, b: TrueLayerUI.Analytics.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerUI.Analytics {
  @_spi(TrueLayer) public enum Event {
    @_spi(TrueLayer) case additionalInputsLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, inputsAndTypes: [Swift.String : Swift.String], paymentCurrency: Swift.String, listSize: Swift.Int? = nil)
    @_spi(TrueLayer) case additionalInputsContinueButtonClicked(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, inputIDs: [Swift.String], listSize: Swift.Int? = nil)
    @_spi(TrueLayer) case additionalInputsSubmitted(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider?, inputsAndTypes: [Swift.String : Swift.String])
    @_spi(TrueLayer) case additionalInputsServerValidationError(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, inputIDs: [Swift.String])
    @_spi(TrueLayer) case branchSelectionLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case branchSelectionSearch(searchTerm: Swift.String, provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case branchSelected(branchIdentifier: TrueLayerCore.Core.Payments.Models.Shared.Provider.Branch.Identifier, provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case countryFlagTapped
    @_spi(TrueLayer) case countrySelected(countryCode: Swift.String)
    @_spi(TrueLayer) case countrySelectionLoaded
    @_spi(TrueLayer) case consentGranted(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, amount: Swift.Double?, currency: Swift.String)
    @_spi(TrueLayer) case consentLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, amount: Swift.Double?, currency: Swift.String, isSignupPlus: Swift.Bool)
    @_spi(TrueLayer) case consentHowDoesThisWork(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, amount: Swift.Double?, currency: Swift.String, isSignupPlus: Swift.Bool)
    @_spi(TrueLayer) case errorOccurred(type: Swift.String, message: Swift.String, moreInfo: Swift.String?)
    @_spi(TrueLayer) case legalsOpened(link: Foundation.URL)
    @_spi(TrueLayer) case ibanHelpLinkTapped(link: Foundation.URL, provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case loaderScreenLoaded
    @_spi(TrueLayer) case mandateDetailsOpened(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case mandateHowItWorks(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case paymentCancelled(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider?)
    @_spi(TrueLayer) case providerSelected(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, isFromPreviouslyUsedSection: Swift.Bool, branchIdentifier: TrueLayerCore.Core.Payments.Models.Shared.Provider.Branch.Identifier?)
    @_spi(TrueLayer) case providerSelectionLoaded(includesPreviouslySelectedProviders: Swift.Bool, unavailableProviders: [Swift.String], paymentCurrency: Swift.String, countryCode: Swift.String?)
    @_spi(TrueLayer) case providerSelectionSearch(searchString: Swift.String)
    @_spi(TrueLayer) case schemeSelectionLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider, schemeIdentifiers: [TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.Identifier])
    @_spi(TrueLayer) case schemeSelectionSubmitted(schemeIdentifier: TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.Identifier)
    @_spi(TrueLayer) case redirectFlowCompleted(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider?)
    @_spi(TrueLayer) case sdkDismissed(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider?, result: TrueLayerUI.AuthorizationFlowResult)
    @_spi(TrueLayer) case sdkStarted(contentSizeCategory: UIKit.UIContentSizeCategory)
    @_spi(TrueLayer) case sdkUICustomised(changes: [Swift.String : Swift.String])
    @_spi(TrueLayer) case userPrimingLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case userPrimingBankLinkTapped
    @_spi(TrueLayer) case userPrimingContinueTapped
    @_spi(TrueLayer) case waitLoaded(provider: TrueLayerCore.Core.Payments.Models.Shared.Provider)
    @_spi(TrueLayer) case waitTimeOutDialogKeepWaitingTapped
    @_spi(TrueLayer) case waitTimeOutDialogLoaded
    @_spi(TrueLayer) case resultScreenLoaderDisplayed
    @_spi(TrueLayer) case resultScreenPaymentResultLoaded(status: TrueLayerCore.Core.Payments.Models.SinglePayment.Status, resultShown: TrueLayerCore.Core.Payments.Models.SinglePayment.ResultShown)
    @_spi(TrueLayer) case resultScreenMandateResultLoaded(status: TrueLayerCore.Core.Payments.Models.Mandate.Status, resultShown: TrueLayerCore.Core.Payments.Models.Mandate.ResultShown)
    @_spi(TrueLayer) case resultScreenContinueClicked
    @_spi(TrueLayer) case userAccountSelectionLoaded(numberOfAccounts: Swift.Int, unhealthyProviders: [TrueLayerCore.Core.Payments.Models.Shared.Provider])
    @_spi(TrueLayer) case userAccountSelected(_: TrueLayerCore.Core.Payments.Models.Shared.UserAccount)
    @_spi(TrueLayer) case userAccountSelectedNewAccount
    @_spi(TrueLayer) case userAccountDeleteAccount(_: TrueLayerCore.Core.Payments.Models.Shared.UserAccount)
    @_spi(TrueLayer) case fallbackWebViewLoaded
  }
}
extension TrueLayerUI.Analytics {
  public enum IntegrationType : Swift.Equatable {
    case objC
    case reactNative(version: Swift.String)
    case undefined
    public static func == (a: TrueLayerUI.Analytics.IntegrationType, b: TrueLayerUI.Analytics.IntegrationType) -> Swift.Bool
  }
}
extension TrueLayerUI.Analytics {
  @_hasMissingDesignatedInitializers public class Manager {
    convenience public init(in environment: TrueLayerUI.Analytics.Environment, resourceToken: Swift.String, sdkVersion: Swift.String, integrationType: TrueLayerUI.Analytics.IntegrationType)
    @objc deinit
  }
}
public enum Analytics {
}
@_spi(TrueLayer) extension UIKit.UIDevice : TrueLayerUtils.DeviceInformationProvider {
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency public var deviceType: Swift.String? {
    @_spi(TrueLayer) get
  }
}
@_spi(TrueLayer) extension UIKit.UIScreen : TrueLayerUtils.ScreenInformationProvider {
}
@_spi(TrueLayer) public protocol SDKSideEffect : TrueLayerArchitecture.SideEffect where Self.TypedDependencies == TrueLayerUI.SDKDependencies, Self.TypedState == TrueLayerUI.SDKState {
}
@_spi(TrueLayer) public protocol SDKReturningSideEffect : TrueLayerArchitecture.ReturningSideEffect where Self.TypedDependencies == TrueLayerUI.SDKDependencies, Self.TypedState == TrueLayerUI.SDKState {
}
@_spi(TrueLayer) public protocol SDKStateUpdater : TrueLayerArchitecture.StateUpdater where Self.TypedState == TrueLayerUI.SDKState {
}
@_spi(TrueLayer) public class SDKDependencies : TrueLayerArchitecture.Dependencies {
  @_spi(TrueLayer) public var networkManager: TrueLayerNetwork.Network.Manager {
    @_spi(TrueLayer) get
    @_spi(TrueLayer) set
  }
  @_spi(TrueLayer) public var router: TrueLayerArchitecture.Router {
    @_spi(TrueLayer) get
    @_spi(TrueLayer) set
  }
  @_spi(TrueLayer) required public init(_ executor: @escaping TrueLayerArchitecture.GenericExecutor, state: @escaping TrueLayerArchitecture.StateGetter)
  @_spi(TrueLayer) @objc deinit
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState.SinglePayment {
  @_spi(TrueLayer) public struct AdditionalInputs {
    @_spi(TrueLayer) public var steps: [TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.AdditionalInputs.Step]?
    @_spi(TrueLayer) public var allCollectedInputs: [Swift.String : (type: Swift.String, value: Swift.String)]
    @_spi(TrueLayer) public var helpTextModels: [TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.AdditionalInputs.HelpText]
    @_spi(TrueLayer) public var legalCopy: TrueLayerCore.Core.Payments.Models.Shared.ActionableCopy?
    @_spi(TrueLayer) public var networkError: TrueLayerCore.Core.Payments.Models.Shared.BadRequest?
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct AuthorizationFlowInformation {
    @_spi(TrueLayer) public var selectedProvider: TrueLayerCore.Core.Payments.Models.Shared.Provider?
    @_spi(TrueLayer) public var selectedBranch: TrueLayerCore.Core.Payments.Models.Shared.Provider.Branch?
    @_spi(TrueLayer) public var providersConfiguration: [TrueLayerCore.Core.Payments.Models.Shared.Provider.Configuration]
    @_spi(TrueLayer) public var userPrimingInformation: TrueLayerCore.Core.Payments.Models.Shared.Provider.UserPriming?
    @_spi(TrueLayer) public var didPrimeUser: Swift.Bool
    @_spi(TrueLayer) public var userAccounts: [TrueLayerCore.Core.Payments.Models.Shared.UserAccount]
    @_spi(TrueLayer) public var selectedProviderConfiguration: TrueLayerCore.Core.Payments.Models.Shared.Provider.Configuration? {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var selectedProviderIconURL: Foundation.URL? {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var shouldPrimeUser: Swift.Bool {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState.AuthorizationFlowInformation {
  @_spi(TrueLayer) public func shouldShowBranchSelection(paymentType: TrueLayerCore.Core.Payments.Models.Shared.PaymentType) -> Swift.Bool
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct HandleRedirectURLState {
    @_spi(TrueLayer) public enum State {
      @_spi(TrueLayer) case notHandled
      @_spi(TrueLayer) case handling
      @_spi(TrueLayer) case handled
      @_spi(TrueLayer) case expectingRedirectRetry
      @_spi(TrueLayer) case fallbackHPPRetry
      @_spi(TrueLayer) public static func == (a: TrueLayerUI.SDKState.HandleRedirectURLState.State, b: TrueLayerUI.SDKState.HandleRedirectURLState.State) -> Swift.Bool
      @_spi(TrueLayer) public func hash(into hasher: inout Swift.Hasher)
      @_spi(TrueLayer) public var hashValue: Swift.Int {
        @_spi(TrueLayer) get
      }
    }
    @_spi(TrueLayer) public var state: TrueLayerUI.SDKState.HandleRedirectURLState.State
    @_spi(TrueLayer) public var fallbackHPPDidPerformRedirectRetry: Swift.Bool
    @_spi(TrueLayer) public init(state: TrueLayerUI.SDKState.HandleRedirectURLState.State, fallbackHPPDidPerformRedirectRetry: Swift.Bool = false)
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct LocalisationState {
    @_spi(TrueLayer) public var additionalInputsLocalizations: [TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.AdditionalInputs.Localization]
    @_spi(TrueLayer) public var legalCopy: TrueLayerCore.Core.Payments.Models.Shared.ActionableCopy?
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct Mandate {
    @_spi(TrueLayer) public var currentStep: TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Step?
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct MerchantPreferences {
    @_spi(TrueLayer) public var endOfFlowDestinationURL: Foundation.URL
    @_spi(TrueLayer) public var preferredProvidersCountry: Swift.String?
    @_spi(TrueLayer) public var viewController: UIKit.UIViewController!
    @_spi(TrueLayer) public let shouldShowResultScreen: Swift.Bool
    @_spi(TrueLayer) public var maximumResultScreenTimeout: Foundation.TimeInterval?
    @_spi(TrueLayer) public var endOfFlowCompletion: ((TrueLayerUI.AuthorizationFlowResult) -> Swift.Void)?
    @_spi(TrueLayer) public var information: TrueLayerCore.Core.Payments.Models.Shared.Merchant?
    @_spi(TrueLayer) public init(endOfFlowDestinationURL: Foundation.URL, preferredProvidersCountry: Swift.String?, viewController: UIKit.UIViewController?, shouldShowResultScreen: Swift.Bool, maximumResultScreenTimeout: Foundation.TimeInterval?, endOfFlowCompletion: ((TrueLayerUI.AuthorizationFlowResult) -> Swift.Void)?, information: TrueLayerCore.Core.Payments.Models.Shared.Merchant? = nil)
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct PaymentInformation {
    @_spi(TrueLayer) public var identifier: Swift.String
    @_spi(TrueLayer) public var securityToken: Swift.String
    @_spi(TrueLayer) public var paymentType: TrueLayerCore.Core.Payments.Models.Shared.PaymentType?
    @_spi(TrueLayer) public var merchant: TrueLayerCore.Core.Payments.Models.Shared.Merchant?
    @_spi(TrueLayer) public var details: TrueLayerCore.Core.Payments.Models.Shared.PaymentInformation? {
      @_spi(TrueLayer) get
      @_spi(TrueLayer) set
    }
    @_spi(TrueLayer) public var isSignupPlus: Swift.Bool? {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var userShouldSelectScheme: Swift.Bool {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState.PaymentInformation {
  @_spi(TrueLayer) public func initialiseSelectedCountry(preferredCountryCode: TrueLayerCore.Core.Payments.Models.Shared.Country.ID?, eligibleProviders: [TrueLayerCore.Core.Payments.Models.Shared.Provider], lastUsedCountryCode: TrueLayerCore.Core.Payments.Models.Shared.Country.ID?) -> TrueLayerCore.Core.Payments.Models.Shared.Country?
}
@_spi(TrueLayer) public struct SDKState : TrueLayerArchitecture.State {
  @_spi(TrueLayer) public static var visualSettings: TrueLayerUI.UI.VisualSettings!
  @_spi(TrueLayer) public var sdkInformation: TrueLayerUI.SDKState.SDKInformation
  @_spi(TrueLayer) public var merchantInformation: TrueLayerUI.SDKState.MerchantPreferences
  @_spi(TrueLayer) public var paymentInformation: TrueLayerUI.SDKState.PaymentInformation
  @_spi(TrueLayer) public var authorizationFlowInformation: TrueLayerUI.SDKState.AuthorizationFlowInformation
  @_spi(TrueLayer) public var singlePaymentInformation: TrueLayerUI.SDKState.SinglePayment
  @_spi(TrueLayer) public var mandateInformation: TrueLayerUI.SDKState.Mandate
  @_spi(TrueLayer) public var localisation: TrueLayerUI.SDKState.LocalisationState
  @_spi(TrueLayer) public var handleRedirectState: TrueLayerUI.SDKState.HandleRedirectURLState
  @_spi(TrueLayer) public init()
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct SDKInformation {
    @_spi(TrueLayer) public var apiEnvironment: TrueLayerAPI.API.Environment
    @_spi(TrueLayer) public var analyticsEnvironment: TrueLayerUI.Analytics.Environment
    @_spi(TrueLayer) public var urlSession: Foundation.URLSession
    @_spi(TrueLayer) public var sdkVersion: Swift.String
    @_spi(TrueLayer) public var integrationType: TrueLayerUI.Analytics.IntegrationType
    @_spi(TrueLayer) public init(apiEnvironment: TrueLayerAPI.API.Environment, analyticsEnvironment: TrueLayerUI.Analytics.Environment, urlSession: Foundation.URLSession, sdkVersion: Swift.String, integrationType: TrueLayerUI.Analytics.IntegrationType)
  }
}
@_spi(TrueLayer) extension TrueLayerUI.SDKState {
  @_spi(TrueLayer) public struct SinglePayment {
    @_spi(TrueLayer) public var currentStep: TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Step?
    @_spi(TrueLayer) public var aisLegals: TrueLayerCore.Core.Payments.Models.Shared.AISLegals?
    @_spi(TrueLayer) public var pisLegals: TrueLayerCore.Core.Payments.Models.Shared.PISLegals?
    @_spi(TrueLayer) public var selectedSchemeIdentifier: TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.Identifier?
    @_spi(TrueLayer) public var schemeSelectionType: TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.SelectionType?
    @_spi(TrueLayer) public var additionalInputs: TrueLayerUI.SDKState.SinglePayment.AdditionalInputs
    @_spi(TrueLayer) public var didUserSelectScheme: Swift.Bool {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) public protocol Makeup : TrueLayerUI.Accessory, TrueLayerUI.BackgroundColor, TrueLayerUI.ContentColor {
}
@_spi(TrueLayer) public protocol BackgroundColor {
  @_spi(TrueLayer) var backgroundPrimary: UIKit.UIColor { get }
  @_spi(TrueLayer) var backgroundSecondary: UIKit.UIColor { get }
  @_spi(TrueLayer) var backgroundActionPrimary: UIKit.UIColor { get }
  @_spi(TrueLayer) var backgroundCell: UIKit.UIColor { get }
}
@_spi(TrueLayer) public protocol ContentColor {
  @_spi(TrueLayer) var contentPrimary: UIKit.UIColor { get }
  @_spi(TrueLayer) var contentSecondary: UIKit.UIColor { get }
  @_spi(TrueLayer) var contentPrimaryInverted: UIKit.UIColor { get }
  @_spi(TrueLayer) var contentAction: UIKit.UIColor { get }
  @_spi(TrueLayer) var contentError: UIKit.UIColor { get }
}
@_spi(TrueLayer) public protocol Accessory {
  @_spi(TrueLayer) var separator: UIKit.UIColor { get }
  @_spi(TrueLayer) var uiElementBorder: UIKit.UIColor { get }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public struct VisualSettings {
    @_spi(TrueLayer) public let colors: any TrueLayerUI.Makeup
    @_spi(TrueLayer) public let customFontFamilyName: Swift.String?
    @_spi(TrueLayer) public init(color: any TrueLayerUI.Makeup = UI.MakeupColors(), customFontFamilyName: Swift.String? = nil)
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public struct MakeupColors : TrueLayerUI.Makeup {
    @_spi(TrueLayer) public let backgroundPrimary: UIKit.UIColor
    @_spi(TrueLayer) public let backgroundSecondary: UIKit.UIColor
    @_spi(TrueLayer) public let backgroundActionPrimary: UIKit.UIColor
    @_spi(TrueLayer) public let backgroundCell: UIKit.UIColor
    @_spi(TrueLayer) public let contentPrimary: UIKit.UIColor
    @_spi(TrueLayer) public let contentSecondary: UIKit.UIColor
    @_spi(TrueLayer) public let contentPrimaryInverted: UIKit.UIColor
    @_spi(TrueLayer) public let contentAction: UIKit.UIColor
    @_spi(TrueLayer) public let contentError: UIKit.UIColor
    @_spi(TrueLayer) public let separator: UIKit.UIColor
    @_spi(TrueLayer) public let uiElementBorder: UIKit.UIColor
    @_spi(TrueLayer) public init(backgroundPrimary: UIKit.UIColor = .systemBackground, backgroundSecondary: UIKit.UIColor = .secondarySystemBackground, backgroundActionPrimary: UIKit.UIColor = .systemBlue, backgroundCell: UIKit.UIColor = .clear, contentPrimary: UIKit.UIColor = .label, contentSecondary: UIKit.UIColor = .secondaryLabel, contentPrimaryInverted: UIKit.UIColor = .white, contentAction: UIKit.UIColor = .systemBlue, contentError: UIKit.UIColor = .systemRed, separator: UIKit.UIColor = .separator, uiElementBorder: UIKit.UIColor = .systemGray5)
  }
}
@_spi(TrueLayer) @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TLViewControllerWithLocalState<V> : TrueLayerArchitecture.TLViewControllerWithLocalState<V> where V : UIKit.UIView, V : TrueLayerArchitecture.TLModelledViewWithViewController, V.VM : TrueLayerArchitecture.TLStatefulViewModelWithLocalState {
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency public var didTapBackButton: (() async -> Swift.Void)?
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityPerformEscape() -> Swift.Bool
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency public func addBackButton()
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override public init(store: TrueLayerArchitecture.ActionlessStore<V.VM.TypedState>, localState: V.VM.TypedLocalState)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder __argument1: Foundation.NSCoder)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override public init(store: TrueLayerArchitecture.ActionlessStore<V.VM.TypedState>)
  @_spi(TrueLayer) @objc deinit
}
@_spi(TrueLayer) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TLNavigationController : UIKit.UINavigationController, TrueLayerArchitecture.Presentable {
  @_spi(TrueLayer) @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(TrueLayer) @objc deinit
}
@_spi(TrueLayer) public enum UI {
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public enum SDKRoot {
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public enum PresentationStyle {
    @_spi(TrueLayer) case push
    @_spi(TrueLayer) case present(presentationStyle: UIKit.UIModalPresentationStyle = .automatic, shouldWrapInUINavigationController: Swift.Bool = false)
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.SDKRoot.ViewModel {
  @_spi(TrueLayer) public struct LocalState : TrueLayerArchitecture.TLLocalState {
    @_spi(TrueLayer) public init(customizedUIElements: [Swift.String : Swift.String])
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.SDKRoot {
  @_spi(TrueLayer) @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class View : UIKit.UIView, TrueLayerArchitecture.TLModelledViewWithViewController {
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public func setup()
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public func style()
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public func layout()
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public func update(oldViewModel: TrueLayerUI.UI.SDKRoot.ViewModel?)
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_spi(TrueLayer) public typealias VM = TrueLayerUI.UI.SDKRoot.ViewModel
    @_spi(TrueLayer) @objc deinit
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.SDKRoot {
  @_spi(TrueLayer) @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ViewController : TrueLayerUI.TLViewControllerWithLocalState<TrueLayerUI.UI.SDKRoot.View> {
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override final public func trackLoadedAnalytics() async
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override final public func handleSDKNavigationInterference() async
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public func restartPayment()
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override public init(store: TrueLayerArchitecture.ActionlessStore<TrueLayerUI.SDKState>, localState: TrueLayerUI.UI.SDKRoot.ViewModel.LocalState)
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder __argument1: Foundation.NSCoder)
    @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency override public init(store: TrueLayerArchitecture.ActionlessStore<TrueLayerUI.SDKState>)
    @_spi(TrueLayer) @objc deinit
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.SDKRoot.ViewController : TrueLayerArchitecture.Routable {
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public var navigationConfiguration: [TrueLayerArchitecture.RoutingRequest : any TrueLayerArchitecture.RoutingInstruction] {
    @_spi(TrueLayer) get
  }
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency final public var routeIdentifier: TrueLayerUI.RouteIdentifier {
    @_spi(TrueLayer) get
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.SDKRoot {
  @_spi(TrueLayer) public struct ViewModel : TrueLayerArchitecture.TLStatefulViewModelWithLocalState {
    @_spi(TrueLayer) public init?(state: TrueLayerUI.SDKState?, localState: TrueLayerUI.UI.SDKRoot.ViewModel.LocalState)
    @_spi(TrueLayer) public typealias S = TrueLayerUI.SDKState
    @_spi(TrueLayer) public typealias TypedLocalState = TrueLayerUI.UI.SDKRoot.ViewModel.LocalState
    @_spi(TrueLayer) public typealias TypedState = TrueLayerUI.SDKState
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public enum Route : Swift.String {
    @_spi(TrueLayer) case paymentConsent
    @_spi(TrueLayer) case bottomSheet
    @_spi(TrueLayer) case howDoesThisWork
    @_spi(TrueLayer) case mandateConsent
    @_spi(TrueLayer) case countrySelection
    @_spi(TrueLayer) case mandateDetails
    @_spi(TrueLayer) case mandateHowItWorks
    @_spi(TrueLayer) case singleChoiceListAdditionalInputs
    @_spi(TrueLayer) case textInputsAdditionalInputs
    @_spi(TrueLayer) case textWithImageAdditionalInputs
    @_spi(TrueLayer) case userAccountSelection
    @_spi(TrueLayer) case providerSelection
    @_spi(TrueLayer) case branchSelection
    @_spi(TrueLayer) case zoomedImage
    @_spi(TrueLayer) case sdkRoot
    @_spi(TrueLayer) case wait
    @_spi(TrueLayer) case userPriming
    @_spi(TrueLayer) case schemeSelection
    @_spi(TrueLayer) case resultScreen
    @_spi(TrueLayer) case webView
    @_spi(TrueLayer) case awaitRedirectResponse
    @_spi(TrueLayer) case additionalInputsConfirmAccountSelection
    @_spi(TrueLayer) public init?(rawValue: Swift.String)
    @_spi(TrueLayer) public typealias RawValue = Swift.String
    @_spi(TrueLayer) public var rawValue: Swift.String {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public enum Generic {
    @_spi(TrueLayer) public enum Logic {
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.Generic.Logic {
  @_spi(TrueLayer) public struct FetchAndUpdatePaymentDetails : TrueLayerUI.SDKSideEffect {
    @_spi(TrueLayer) public init()
    @_spi(TrueLayer) public func execute(context: TrueLayerArchitecture.Context<TrueLayerUI.SDKState, TrueLayerUI.SDKDependencies>) async throws
    @_spi(TrueLayer) public typealias TypedDependencies = TrueLayerUI.SDKDependencies
    @_spi(TrueLayer) public typealias TypedState = TrueLayerUI.SDKState
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.Generic.Logic {
  @_spi(TrueLayer) public struct ShowLoader : TrueLayerUI.SDKSideEffect {
    @_spi(TrueLayer) public init()
    @_spi(TrueLayer) public func execute(context: TrueLayerArchitecture.Context<TrueLayerUI.SDKState, TrueLayerUI.SDKDependencies>) async throws
    @_spi(TrueLayer) public typealias TypedDependencies = TrueLayerUI.SDKDependencies
    @_spi(TrueLayer) public typealias TypedState = TrueLayerUI.SDKState
  }
  @_spi(TrueLayer) public struct HideLoader : TrueLayerUI.SDKSideEffect {
    @_spi(TrueLayer) public init(completion: (() -> Swift.Void)? = nil)
    @_spi(TrueLayer) public func execute(context: TrueLayerArchitecture.Context<TrueLayerUI.SDKState, TrueLayerUI.SDKDependencies>) async throws
    @_spi(TrueLayer) public typealias TypedDependencies = TrueLayerUI.SDKDependencies
    @_spi(TrueLayer) public typealias TypedState = TrueLayerUI.SDKState
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.TrueLayerError {
  @_spi(TrueLayer) public enum Mandate : Swift.Error, Swift.Equatable, Swift.CustomStringConvertible, Swift.CaseIterable {
    @_spi(TrueLayer) case revoked
    @_spi(TrueLayer) public var description: Swift.String {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public func hash(into hasher: inout Swift.Hasher)
    @_spi(TrueLayer) public static func == (a: TrueLayerUI.UI.TrueLayerError.Mandate, b: TrueLayerUI.UI.TrueLayerError.Mandate) -> Swift.Bool
    @_spi(TrueLayer) public typealias AllCases = [TrueLayerUI.UI.TrueLayerError.Mandate]
    @_spi(TrueLayer) nonisolated public static var allCases: [TrueLayerUI.UI.TrueLayerError.Mandate] {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var hashValue: Swift.Int {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI.TrueLayerError {
  @_spi(TrueLayer) public enum SinglePayment : Swift.Error, Swift.Equatable, Swift.CustomStringConvertible, Swift.CaseIterable {
    @_spi(TrueLayer) case blocked
    @_spi(TrueLayer) case invalidAccountDetails
    @_spi(TrueLayer) case invalidAccountHolderName
    @_spi(TrueLayer) case invalidCredentials
    @_spi(TrueLayer) case invalidRemitterAccount
    @_spi(TrueLayer) case insufficientFunds
    @_spi(TrueLayer) case notAuthorized
    @_spi(TrueLayer) case paymentLimitExceeded
    @_spi(TrueLayer) case providerExpired
    @_spi(TrueLayer) case userCanceledAtProvider
    @_spi(TrueLayer) public var description: Swift.String {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public func hash(into hasher: inout Swift.Hasher)
    @_spi(TrueLayer) public static func == (a: TrueLayerUI.UI.TrueLayerError.SinglePayment, b: TrueLayerUI.UI.TrueLayerError.SinglePayment) -> Swift.Bool
    @_spi(TrueLayer) public typealias AllCases = [TrueLayerUI.UI.TrueLayerError.SinglePayment]
    @_spi(TrueLayer) nonisolated public static var allCases: [TrueLayerUI.UI.TrueLayerError.SinglePayment] {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var hashValue: Swift.Int {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerUI.UI {
  @_spi(TrueLayer) public enum TrueLayerError : Swift.Error, Swift.Equatable, Swift.CustomStringConvertible {
    @_spi(TrueLayer) case failedToDecode(_: Swift.String)
    @_spi(TrueLayer) case invalidToken
    @_spi(TrueLayer) case invalidRedirectURI(_: [Swift.String])
    @_spi(TrueLayer) case resourceNotFound
    @_spi(TrueLayer) case connectionIssues
    @_spi(TrueLayer) case serverError
    @_spi(TrueLayer) case unexpectedBehavior
    @_spi(TrueLayer) case sdkNotConfigured
    @_spi(TrueLayer) case providerOffline
    @_spi(TrueLayer) case userCanceled
    @_spi(TrueLayer) case authorizationFailed
    @_spi(TrueLayer) case providerError
    @_spi(TrueLayer) case providerRejected
    @_spi(TrueLayer) case invalidRequest
    @_spi(TrueLayer) case invalidSortCode
    @_spi(TrueLayer) case expired
    @_spi(TrueLayer) case rejected
    @_spi(TrueLayer) case unknownError
    @_spi(TrueLayer) case singlePayment(_: TrueLayerUI.UI.TrueLayerError.SinglePayment)
    @_spi(TrueLayer) case mandate(_: TrueLayerUI.UI.TrueLayerError.Mandate)
    @_spi(TrueLayer) case other(reason: Swift.String)
    @_spi(TrueLayer) public var description: Swift.String {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public var extraInfo: Swift.String? {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public init(_ error: any Swift.Error)
    @_spi(TrueLayer) public static func == (a: TrueLayerUI.UI.TrueLayerError, b: TrueLayerUI.UI.TrueLayerError) -> Swift.Bool
  }
}
@_spi(TrueLayer) public enum AuthorizationFlowResult {
  @_spi(TrueLayer) public typealias SinglePayment = Swift.Result<TrueLayerCore.Core.Payments.Models.SinglePayment.State, TrueLayerUI.UI.TrueLayerError>
  @_spi(TrueLayer) public typealias Mandate = Swift.Result<TrueLayerCore.Core.Payments.Models.Mandate.State, TrueLayerUI.UI.TrueLayerError>
  @_spi(TrueLayer) case singlePayment(_: TrueLayerUI.AuthorizationFlowResult.SinglePayment, resultShown: TrueLayerCore.Core.Payments.Models.SinglePayment.ResultShown)
  @_spi(TrueLayer) case mandate(_: TrueLayerUI.AuthorizationFlowResult.Mandate, resultShown: TrueLayerCore.Core.Payments.Models.Mandate.ResultShown)
}
@_spi(TrueLayer) public protocol URLOpener {
  @_spi(TrueLayer) func open(_ url: Foundation.URL)
}
@_spi(TrueLayer) extension UIKit.UIApplication : TrueLayerUI.URLOpener {
  @_spi(TrueLayer) @_Concurrency.MainActor @preconcurrency public func open(_ url: Foundation.URL)
}
extension TrueLayerUI.Analytics.Environment : Swift.Equatable {}
extension TrueLayerUI.Analytics.Environment : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerUI.SDKState.HandleRedirectURLState.State : Swift.Equatable {}
@_spi(TrueLayer) extension TrueLayerUI.SDKState.HandleRedirectURLState.State : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerUI.UI.Route : Swift.Equatable {}
@_spi(TrueLayer) extension TrueLayerUI.UI.Route : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerUI.UI.Route : Swift.RawRepresentable {}
@_spi(TrueLayer) extension TrueLayerUI.UI.TrueLayerError.Mandate : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerUI.UI.TrueLayerError.SinglePayment : Swift.Hashable {}
