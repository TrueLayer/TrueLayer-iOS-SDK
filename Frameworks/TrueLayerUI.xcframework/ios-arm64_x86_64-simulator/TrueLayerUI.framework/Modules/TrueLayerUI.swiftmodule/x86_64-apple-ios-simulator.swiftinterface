// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import SpriteKit
import Swift
import SwiftUI
import TrueLayerAPI
import TrueLayerArchitecture
import TrueLayerCore
import TrueLayerLogger
import TrueLayerNetwork
import TrueLayerUtils
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _SpriteKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class TrueLayerUIResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum TrueLayerUIFontFamily : Swift.Sendable {
  public enum ProximaNova : Swift.Sendable {
    public static let black: TrueLayerUI.TrueLayerUIFontConvertible
    public static let blackItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let bold: TrueLayerUI.TrueLayerUIFontConvertible
    public static let boldItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let extrabold: TrueLayerUI.TrueLayerUIFontConvertible
    public static let extraboldItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let light: TrueLayerUI.TrueLayerUIFontConvertible
    public static let lightItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let regular: TrueLayerUI.TrueLayerUIFontConvertible
    public static let regularItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let semibold: TrueLayerUI.TrueLayerUIFontConvertible
    public static let semiboldItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let thinItalic: TrueLayerUI.TrueLayerUIFontConvertible
    public static let thin: TrueLayerUI.TrueLayerUIFontConvertible
    public static let all: [TrueLayerUI.TrueLayerUIFontConvertible]
  }
  public static let allCustomFonts: [TrueLayerUI.TrueLayerUIFontConvertible]
  public static func registerAllCustomFonts()
}
public struct TrueLayerUIFontConvertible : Swift.Sendable {
  public let name: Swift.String
  public let family: Swift.String
  public let path: Swift.String
  public typealias Font = UIKit.UIFont
  public func font(size: CoreFoundation.CGFloat) -> TrueLayerUI.TrueLayerUIFontConvertible.Font
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public func swiftUIFont(size: CoreFoundation.CGFloat) -> SwiftUICore.Font
  public func register()
}
extension UIKit.UIFont {
  convenience public init?(font: TrueLayerUI.TrueLayerUIFontConvertible, size: CoreFoundation.CGFloat)
}
extension TrueLayerUI.Analytics {
  public enum Environment {
    case development
    case sandbox
    case production
    public static func == (a: TrueLayerUI.Analytics.Environment, b: TrueLayerUI.Analytics.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerUI.Analytics {
  public enum IntegrationType : Swift.Equatable {
    case objC
    case reactNative(version: Swift.String)
    case undefined
    public static func == (a: TrueLayerUI.Analytics.IntegrationType, b: TrueLayerUI.Analytics.IntegrationType) -> Swift.Bool
  }
}
extension TrueLayerUI.Analytics {
  @_hasMissingDesignatedInitializers public class Manager {
    convenience public init(in environment: TrueLayerUI.Analytics.Environment, resourceToken: Swift.String, sdkVersion: Swift.String, integrationType: TrueLayerUI.Analytics.IntegrationType)
    @objc deinit
  }
}
public enum Analytics {
}










































extension TrueLayerUI.Analytics.Environment : Swift.Equatable {}
extension TrueLayerUI.Analytics.Environment : Swift.Hashable {}
