// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrueLayerCore
import Foundation
import Swift
import _Concurrency
public enum Core {
}
extension TrueLayerCore.Core {
  public enum Payments {
  }
}
extension TrueLayerCore.Core.Payments {
  public enum Models {
  }
}
extension TrueLayerCore.Core.Payments.Models {
  public enum Payment {
    public typealias Currency = Swift.String
    public typealias Identifier = Swift.String
  }
}
extension TrueLayerCore.Core.Payments.Models {
  public struct ActionableCopy : Swift.Equatable {
    public let text: Swift.String
    public let actionableLinks: [Swift.String : Foundation.URL]
    public init(text: Swift.String, actionableKeys: [Swift.String : Foundation.URL])
    public static func == (a: TrueLayerCore.Core.Payments.Models.ActionableCopy, b: TrueLayerCore.Core.Payments.Models.ActionableCopy) -> Swift.Bool
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment {
  public enum AuthorizationFlow {
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow {
  public enum Status : Swift.Equatable {
    case authorizing(nextStep: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Step)
    case failed(reason: TrueLayerCore.Core.Payments.Models.Payment.FailureReason)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Status, b: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Status) -> Swift.Bool
  }
  public enum Step : Swift.Equatable {
    case consent(subsequentAction: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.SubsequentActionHint)
    case providerSelection(providers: [TrueLayerCore.Core.Payments.Models.Provider])
    case redirect(url: Foundation.URL)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Step, b: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Step) -> Swift.Bool
  }
  public enum SubsequentActionHint : Swift.Decodable {
    case form
    case redirect
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.SubsequentActionHint, b: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.SubsequentActionHint) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
}
extension TrueLayerCore.Core.Payments.Models {
  public struct Country : Swift.Identifiable, Swift.Hashable, Swift.Codable {
    public var id: Swift.String {
      get
    }
    public let code: Swift.String
    public let name: Swift.String
    public var flagURL: Foundation.URL? {
      get
    }
    public init(code: Swift.String, name: Swift.String)
    public init?(code: Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Country, b: TrueLayerCore.Core.Payments.Models.Country) -> Swift.Bool
    public typealias ID = Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
}
extension TrueLayerCore.Core.Payments.Models.Country {
  public struct Stored : Swift.Codable {
    public let id: TrueLayerCore.Core.Payments.Models.Country.ID
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension TrueLayerCore.Core.Payments.Models {
  public struct Merchant : Swift.Equatable {
    public let name: Swift.String
    public let logoURI: Foundation.URL
    public init(name: Swift.String, logoURI: Foundation.URL)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Merchant, b: TrueLayerCore.Core.Payments.Models.Merchant) -> Swift.Bool
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment {
  public struct Information : Swift.Equatable {
    public let identifier: TrueLayerCore.Core.Payments.Models.Payment.Identifier
    public let amount: Swift.Double
    public let currency: TrueLayerCore.Core.Payments.Models.Payment.Currency
    public let status: TrueLayerCore.Core.Payments.Models.Payment.Status
    public let method: TrueLayerCore.Core.Payments.Models.Payment.Method
    public init(identifier: TrueLayerCore.Core.Payments.Models.Payment.Identifier, amount: Swift.Double, currency: TrueLayerCore.Core.Payments.Models.Payment.Currency, status: TrueLayerCore.Core.Payments.Models.Payment.Status, method: TrueLayerCore.Core.Payments.Models.Payment.Method)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.Information, b: TrueLayerCore.Core.Payments.Models.Payment.Information) -> Swift.Bool
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment {
  public enum Method : Swift.Equatable {
    case bankTransfer(beneficiary: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.Beneficiary, providerSelection: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.ProviderSelection)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.Method, b: TrueLayerCore.Core.Payments.Models.Payment.Method) -> Swift.Bool
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment.Method {
  public enum BankTransfer {
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer {
  public struct Beneficiary : Swift.Equatable {
    public let name: Swift.String?
    public init(name: Swift.String?)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.Beneficiary, b: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.Beneficiary) -> Swift.Bool
  }
  public enum ProviderSelection : Swift.Equatable {
    case preselected(providerID: Swift.String)
    case userSelected(providerID: Swift.String)
    case userShouldSelect
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.ProviderSelection, b: TrueLayerCore.Core.Payments.Models.Payment.Method.BankTransfer.ProviderSelection) -> Swift.Bool
  }
}
extension TrueLayerCore.Core.Payments.Models.Payment {
  public enum Status : Swift.Equatable {
    case authorizationRequired
    case authorizing(nextStep: TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.Step)
    case authorized
    case executed
    case settled
    case failed(reason: TrueLayerCore.Core.Payments.Models.Payment.FailureReason)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.Status, b: TrueLayerCore.Core.Payments.Models.Payment.Status) -> Swift.Bool
  }
  public enum FailureReason : Swift.Equatable {
    case authorizationFailed
    case canceled
    case expired
    case providerRejected
    case unsupportedAction
    case other(reason: Swift.String)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.FailureReason, b: TrueLayerCore.Core.Payments.Models.Payment.FailureReason) -> Swift.Bool
  }
  public enum State {
    case authorized
    case executed
    case redirect
    case settled
    public static func == (a: TrueLayerCore.Core.Payments.Models.Payment.State, b: TrueLayerCore.Core.Payments.Models.Payment.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerCore.Core.Payments.Models {
  public struct Provider : Swift.Identifiable, Swift.Hashable {
    public typealias Identifier = Swift.String
    public let id: TrueLayerCore.Core.Payments.Models.Provider.Identifier
    public let displayName: Swift.String
    public let country: TrueLayerCore.Core.Payments.Models.Country
    public let iconURL: Foundation.URL?
    public let logoURL: Foundation.URL?
    public init(id: Swift.String, displayName: Swift.String, country: TrueLayerCore.Core.Payments.Models.Country, iconURL: Foundation.URL?, logoURL: Foundation.URL?)
    public func addLastUsedPrefix() -> TrueLayerCore.Core.Payments.Models.Provider.Identifier
    public func cleanID() -> TrueLayerCore.Core.Payments.Models.Provider.ID
    public func cleaned() -> TrueLayerCore.Core.Payments.Models.Provider
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Provider, b: TrueLayerCore.Core.Payments.Models.Provider) -> Swift.Bool
    public typealias ID = TrueLayerCore.Core.Payments.Models.Provider.Identifier
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TrueLayerCore.Core.Payments.Models.Provider {
  public struct Stored : Swift.Codable, Swift.Equatable {
    public let id: TrueLayerCore.Core.Payments.Models.Provider.ID
    public let date: Foundation.TimeInterval
    public init(id: TrueLayerCore.Core.Payments.Models.Provider.ID, date: Foundation.TimeInterval)
    public static func == (a: TrueLayerCore.Core.Payments.Models.Provider.Stored, b: TrueLayerCore.Core.Payments.Models.Provider.Stored) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension Swift.Array where Element == TrueLayerCore.Core.Payments.Models.Provider {
  public var countries: Swift.Set<TrueLayerCore.Core.Payments.Models.Country> {
    get
  }
}
public protocol CountryPersistable {
  func updateLastUsed(_ country: TrueLayerCore.Core.Payments.Models.Country) throws
  func getLastUsedCountry() throws -> TrueLayerCore.Core.Payments.Models.Country.Stored?
}
public protocol DataPersistable {
  func get<Key, Value>(_ key: Key) throws -> Value? where Key : TrueLayerCore.PersistenceKey, Value : Swift.Decodable
  func delete<Key>(_ key: Key) where Key : TrueLayerCore.PersistenceKey
  func set<Value, Key>(_ value: Value, using key: Key) throws where Value : Swift.Encodable, Key : TrueLayerCore.PersistenceKey
}
public protocol PersistenceKey : Swift.RawRepresentable where Self.RawValue == Swift.String {
}
public protocol ProviderPersistable {
  func updateLastUsed(with provider: TrueLayerCore.Core.Payments.Models.Provider.ID, dateProvider: () -> Foundation.Date) throws
  func removeFromLastUsed(_ provider: TrueLayerCore.Core.Payments.Models.Provider.ID) throws
  func getLastUsedProviders() throws -> [TrueLayerCore.Core.Payments.Models.Provider.Stored]
}
extension Foundation.UserDefaults : TrueLayerCore.CountryPersistable {
  public func updateLastUsed(_ country: TrueLayerCore.Core.Payments.Models.Country) throws
  public func getLastUsedCountry() throws -> TrueLayerCore.Core.Payments.Models.Country.Stored?
}
extension Foundation.UserDefaults : TrueLayerCore.DataPersistable {
  public func get<Key, Value>(_ key: Key) throws -> Value? where Key : TrueLayerCore.PersistenceKey, Value : Swift.Decodable
  public func delete<Key>(_ key: Key) where Key : TrueLayerCore.PersistenceKey
  public func set<Value, Key>(_ value: Value, using key: Key) throws where Value : Swift.Encodable, Key : TrueLayerCore.PersistenceKey
}
extension Foundation.UserDefaults {
  public static var trueLayerSDK: Foundation.UserDefaults {
    get
  }
}
extension Foundation.UserDefaults : TrueLayerCore.ProviderPersistable {
  public func updateLastUsed(with providerID: TrueLayerCore.Core.Payments.Models.Provider.ID, dateProvider: () -> Foundation.Date = Date.init) throws
  public func removeFromLastUsed(_ providerID: TrueLayerCore.Core.Payments.Models.Provider.ID) throws
  public func getLastUsedProviders() throws -> [TrueLayerCore.Core.Payments.Models.Provider.Stored]
}
public enum UserDefaultsKey : Swift.String, TrueLayerCore.PersistenceKey {
  case lastUsedCountry
  case lastUsedProviders
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias DateProvider = () -> Foundation.Date
public typealias UUIDProvider = () -> Foundation.UUID
extension TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.SubsequentActionHint : Swift.Equatable {}
extension TrueLayerCore.Core.Payments.Models.Payment.AuthorizationFlow.SubsequentActionHint : Swift.Hashable {}
extension TrueLayerCore.Core.Payments.Models.Payment.State : Swift.Equatable {}
extension TrueLayerCore.Core.Payments.Models.Payment.State : Swift.Hashable {}
extension TrueLayerCore.UserDefaultsKey : Swift.Equatable {}
extension TrueLayerCore.UserDefaultsKey : Swift.Hashable {}
