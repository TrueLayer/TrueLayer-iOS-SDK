// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrueLayerUtils
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
extension Swift.Array {
  public func appending(_ newElement: Element) -> Swift.Array<Element>
}
extension Swift.Bool {
  public var isFalse: Swift.Bool {
    get
  }
}
public protocol BundleInformationProvider {
  var name: Swift.String { get }
  var version: Swift.String { get }
}
extension Foundation.Bundle : TrueLayerUtils.BundleInformationProvider {
  public var name: Swift.String {
    get
  }
  public var version: Swift.String {
    get
  }
}
extension Swift.Collection {
  public subscript(safe offset: Swift.Int) -> Self.Iterator.Element? {
    get
  }
  public var isNotEmpty: Swift.Bool {
    get
  }
}
extension Swift.Int {
  public func between(_ low: Swift.Int, and high: Swift.Int) -> Swift.Bool
}
public typealias CustomInteraction<T> = (T) -> Swift.Void

#if compiler(>=5.3) && $AsyncAwait
public typealias CustomAsyncInteraction<T> = (T) async -> Swift.Void
#endif

public typealias Interaction = () -> Swift.Void

#if compiler(>=5.3) && $AsyncAwait
public typealias AsyncInteraction = () async -> Swift.Void
#endif

public protocol LocaleInformationProvider {
  static var preferredLanguages: [Swift.String] { get }
  var preferredLanguages: [Swift.String] { get }
  var languageCode: Swift.String? { get }
}
extension TrueLayerUtils.LocaleInformationProvider {
  public var preferredLanguages: [Swift.String] {
    get
  }
}
extension Foundation.Locale : TrueLayerUtils.LocaleInformationProvider {
}
extension Foundation.NSAttributedString {
  public func addingAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], to substring: Swift.String) -> Foundation.NSAttributedString
  public func addingAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], to substrings: [Swift.String]) -> Foundation.NSAttributedString
}
extension Foundation.NSString {
  convenience public init?(jsonData: Foundation.Data)
}
public enum Utils {
}
extension Swift.String {
  public func trimmedWhitespaceAndDuplicateSpaces() -> Swift.String
  public mutating func trimWhitespaceAndDuplicateSpaces()
  public func normalized() -> Swift.String
  public mutating func normalize()
  public func matches(_ regex: Swift.String) -> Swift.Bool
}
public func mainThread(_ closure: () -> Swift.Void)
extension Foundation.Thread {
  public var isRunningXCTest: Swift.Bool {
    get
  }
}
public protocol TimezoneInformationProvider {
  var identifier: Swift.String { get }
}
extension Foundation.TimeZone : TrueLayerUtils.TimezoneInformationProvider {
}
extension UIKit.UIScreen {
  @_Concurrency.MainActor(unsafe) public static var relativeWidth: CoreGraphics.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var isShortScreen: Swift.Bool {
    get
  }
}
extension Foundation.URL {
  public init(staticString string: Swift.StaticString)
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func load(svgURL: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func loadEmptyPage()
}
