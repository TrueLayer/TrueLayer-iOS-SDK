// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TrueLayerAPI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
@_spi(TrueLayer) import TrueLayerCore
@_spi(TrueLayer) import TrueLayerMockable
@_spi(TrueLayer) import TrueLayerNetwork
@_spi(TrueLayer) import TrueLayerUtils
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_spi(TrueLayer) extension TrueLayerAPI.API {
  @_spi(TrueLayer) public enum Environment : Swift.Codable {
    @_spi(TrueLayer) case development
    @_spi(TrueLayer) case production
    @_spi(TrueLayer) case sandbox
    @_spi(TrueLayer) public static func == (a: TrueLayerAPI.API.Environment, b: TrueLayerAPI.API.Environment) -> Swift.Bool
    @_spi(TrueLayer) public func hash(into hasher: inout Swift.Hasher)
    @_spi(TrueLayer) public func encode(to encoder: any Swift.Encoder) throws
    @_spi(TrueLayer) public var hashValue: Swift.Int {
      @_spi(TrueLayer) get
    }
    @_spi(TrueLayer) public init(from decoder: any Swift.Decoder) throws
  }
}
@_spi(TrueLayer) public enum API {
  @_spi(TrueLayer) public typealias PaymentToken = Swift.String
  @_spi(TrueLayer) public static let mockedRequests: Swift.Set<TrueLayerNetwork.Network.Mock.Exchange>
}
@_spi(TrueLayer) extension TrueLayerAPI.API {
  @_spi(TrueLayer) public enum Payments {
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments {
  @_spi(TrueLayer) public enum Models {
  }
  @_spi(TrueLayer) public enum Requests {
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Models {
  @_spi(TrueLayer) public enum Response {
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Models.Response {
  @_spi(TrueLayer) public enum SinglePayment {
    @_spi(TrueLayer) public typealias ID = Swift.String
  }
  @_spi(TrueLayer) public enum Mandate {
    @_spi(TrueLayer) public typealias ID = Swift.String
  }
  @_spi(TrueLayer) public enum Shared {
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Requests {
  @_spi(TrueLayer) public enum Manager {
  }
}
@_spi(TrueLayer) public protocol Normalizable : Swift.Decodable {
  associatedtype Output
  @_spi(TrueLayer) func normalized() -> Self.Output
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Models.Response.Shared {
  @_spi(TrueLayer) public struct BadRequest : Swift.Decodable, Swift.Equatable {
    @_spi(TrueLayer) public let errors: [Swift.String : [Swift.String]]
    @_spi(TrueLayer) public static func == (a: TrueLayerAPI.API.Payments.Models.Response.Shared.BadRequest, b: TrueLayerAPI.API.Payments.Models.Response.Shared.BadRequest) -> Swift.Bool
    @_spi(TrueLayer) public init(from decoder: any Swift.Decoder) throws
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Models.Response.Shared.BadRequest : TrueLayerAPI.Normalizable {
  @_spi(TrueLayer) public func normalized() -> TrueLayerCore.Core.Payments.Models.Shared.BadRequest
  @_spi(TrueLayer) public typealias Output = TrueLayerCore.Core.Payments.Models.Shared.BadRequest
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Models.Response.SinglePayment {
  @_spi(TrueLayer) public enum AdditionalInputs {
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Requests.Manager {
  @_spi(TrueLayer) public struct Mandate : TrueLayerAPI.RequestsManager {
    @_spi(TrueLayer) public init(using configuration: any TrueLayerAPI.RequestsManagerConfigurationProvider)
    @_spi(TrueLayer) public func getMandateInformation() async throws -> TrueLayerCore.Core.Payments.Models.Mandate.Information
    @_spi(TrueLayer) public func startAuthorization() async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitProviderSelection(_ providerIdentifier: TrueLayerCore.Core.Payments.Models.Shared.Provider.Identifier) async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
    @_spi(TrueLayer) public func getLegalCopy(for providerCountryCode: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.ActionableCopy
    @_spi(TrueLayer) public func getProvider(with providerID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.Provider
    @_spi(TrueLayer) public func submitConsent() async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
    @_spi(TrueLayer) public func cancelMandate() async throws
    @_spi(TrueLayer) public func submitUserAccountSelection(userAccountID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitNewUserAccountSelection() async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
    @_spi(TrueLayer) public func deleteUserAccount(userAccountID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Mandate.AuthorizationFlow.Status
  }
}
@_spi(TrueLayer) public protocol RequestsManager {
}
@_spi(TrueLayer) public protocol RequestsManagerConfigurationProvider {
  @_spi(TrueLayer) var networkManager: TrueLayerNetwork.Network.Manager { get }
  @_spi(TrueLayer) var paymentIdentifier: Swift.String { get }
  @_spi(TrueLayer) var paymentToken: TrueLayerAPI.API.PaymentToken { get }
  @_spi(TrueLayer) var environment: TrueLayerAPI.API.Environment { get }
  @_spi(TrueLayer) var redirectURL: Foundation.URL { get }
}
@_spi(TrueLayer) public struct RequestsManagerConfiguration : TrueLayerAPI.RequestsManagerConfigurationProvider {
  @_spi(TrueLayer) public let networkManager: TrueLayerNetwork.Network.Manager
  @_spi(TrueLayer) public let paymentIdentifier: Swift.String
  @_spi(TrueLayer) public let paymentToken: TrueLayerAPI.API.PaymentToken
  @_spi(TrueLayer) public let environment: TrueLayerAPI.API.Environment
  @_spi(TrueLayer) public let redirectURL: Foundation.URL
  @_spi(TrueLayer) public init(networkManager: TrueLayerNetwork.Network.Manager, paymentIdentifier: Swift.String, paymentToken: TrueLayerAPI.API.PaymentToken, environment: TrueLayerAPI.API.Environment, redirectURL: Foundation.URL)
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Requests.Manager {
  @_spi(TrueLayer) public struct Shared : TrueLayerAPI.RequestsManager {
    @_spi(TrueLayer) public init(using configuration: any TrueLayerAPI.RequestsManagerConfigurationProvider)
    @_spi(TrueLayer) public func getProvidersConfiguration() async throws -> [TrueLayerCore.Core.Payments.Models.Shared.Provider.Configuration]
    @_spi(TrueLayer) public func getMerchantConfiguration(redirectURI: Foundation.URL, deviceInformationProvider: any TrueLayerUtils.DeviceInformationProvider, screenInformationProvider: any TrueLayerUtils.ScreenInformationProvider, bundleInformationProvider: any TrueLayerUtils.BundleInformationProvider, localeInformationProvider: any TrueLayerUtils.LocaleInformationProvider, resourceType: Swift.String, integrationType: Swift.String, integrationVersion: Swift.String, sdkVersion: Swift.String, isResultScreenEnabled: Swift.Bool?) async throws -> TrueLayerCore.Core.Payments.Models.Shared.Merchant
    @_spi(TrueLayer) public func getLastUsedProviders(userIdentifier: Swift.String, paymentType: TrueLayerCore.Core.Payments.Models.Shared.PaymentType) async throws -> [TrueLayerCore.Core.Payments.Models.Shared.Provider.Identifier]
    @_spi(TrueLayer) public func getAISLegalCopy(providerCountryCode: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.AISLegals
    @_spi(TrueLayer) public func getPISLegalCopy(providerCountryCode: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.PISLegals
    @_spi(TrueLayer) public func getUserPriming(providerIdentifier: TrueLayerCore.Core.Payments.Models.Shared.Provider.Identifier) async throws -> TrueLayerCore.Core.Payments.Models.Shared.Provider.UserPriming.Status
    @_spi(TrueLayer) public func getProvider(with providerID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.Provider
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Payments.Requests.Manager {
  @_spi(TrueLayer) public struct SinglePayment : TrueLayerAPI.RequestsManager {
    @_spi(TrueLayer) public init(using configuration: any TrueLayerAPI.RequestsManagerConfigurationProvider)
    @_spi(TrueLayer) public func getPaymentInformation() async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.Information
    @_spi(TrueLayer) public func pollPaymentStatus(shouldEndPollingPrematurely: @escaping (TrueLayerCore.Core.Payments.Models.SinglePayment.Status) -> Swift.Bool) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.Status
    @_spi(TrueLayer) public func startAuthorization() async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitProviderSelection(_ providerIdentifier: TrueLayerCore.Core.Payments.Models.Shared.Provider.Identifier) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitConsent() async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    #warning("Moved to shared")
    @_spi(TrueLayer) public func getLegalCopy(for providerCountryCode: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.Shared.ActionableCopy
    @_spi(TrueLayer) public func cancelPayment() async throws
    @_spi(TrueLayer) public func getAdditionalInputsHelpText(with providerCountryCode: Swift.String) async throws -> [TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.AdditionalInputs.HelpText]
    @_spi(TrueLayer) public func getAdditionalInputsLocalizations(countryCode: Swift.String) async throws -> [TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.AdditionalInputs.Localization]
    @_spi(TrueLayer) public func submitForm(inputs: [Swift.String : Swift.String], adjacent: TrueLayerCore.Core.Payments.Models.Shared.Adjacent?) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitUserAccountSelection(userAccountID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func submitNewUserAccountSelection() async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func deleteUserAccount(userAccountID: Swift.String) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
    @_spi(TrueLayer) public func getSchemeSelectionType(currency: Swift.String, schemes: [Swift.String]) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.SelectionType
    @_spi(TrueLayer) public func submitScheme(_ schemeIdentifier: TrueLayerCore.Core.Payments.Models.SinglePayment.Scheme.Identifier) async throws -> TrueLayerCore.Core.Payments.Models.SinglePayment.AuthorizationFlow.Status
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API {
  @_spi(TrueLayer) public enum URL {
    @_spi(TrueLayer) public static func host(environment: TrueLayerAPI.API.Environment, subdomain: TrueLayerAPI.API.URL.Subdomain) -> Swift.String
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.URL {
  @_spi(TrueLayer) public enum Subdomain : Swift.String {
    @_spi(TrueLayer) case api
    @_spi(TrueLayer) case paymentExperience
    @_spi(TrueLayer) case www
    @_spi(TrueLayer) public init?(rawValue: Swift.String)
    @_spi(TrueLayer) public typealias RawValue = Swift.String
    @_spi(TrueLayer) public var rawValue: Swift.String {
      @_spi(TrueLayer) get
    }
  }
}
@_spi(TrueLayer) extension TrueLayerAPI.API.Environment : Swift.Equatable {}
@_spi(TrueLayer) extension TrueLayerAPI.API.Environment : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerAPI.API.URL.Subdomain : Swift.Equatable {}
@_spi(TrueLayer) extension TrueLayerAPI.API.URL.Subdomain : Swift.Hashable {}
@_spi(TrueLayer) extension TrueLayerAPI.API.URL.Subdomain : Swift.RawRepresentable {}
